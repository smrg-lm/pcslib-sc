TITLE:: PCSMatrix
summary:: PCS Combinaroty Matrix
categories:: Classes
related:: Classes/PCS, Classes/PCSChain, Classes/SCTable



DESCRIPTION::
This class represents a combinatory matrix of link::Classes/PCS::s, mainly non-serial combinatory matrices.


CLASSMETHODS::

SUBSECTION:: Creation Methods

METHOD:: fromArray
Creates a link::Classes/PCSMatrix:: from a matrix.
ARGUMENT:: arr
An link::Classes/Array:: of link::Classes/Array::s of link::Classes/Integer::s or link::Classes/Array::s (of link::Classes/Integer::s) or link::Classes/PCS::s.
NOTE::If the length of the rows (1th level sub-arrays) are not equal they are padded as empty taking the max row size.::
ARGUMENT:: type
A link::Classes/Symbol:: as the link::Classes/PCSMatrix#-type:: of the link::Classes/PCSMatrix::. Can be a custom name when using this method.
code::
(
// OK
PCSMatrix.fromArray([
	[1, 2, 3],
	[4, 5, 6],
	[7, 8, 9]
]);
)

(
// OK
PCSMatrix.fromArray([
	[PCS[1, 2], 2, 3],
	[4, 5, 6],
	[7, 8, 9]
]);
)

(
// OK
PCSMatrix.fromArray([
	[[1, 2], 3, []],
	[5, PCS[6, 7, 8], 9],
	[10, 11, [12, 13, 14]]
]);
)

(
// NOT YET
PCSMatrix.fromArray([
	PCS[1, 2, 3],
	PCS[4, 5, 6],
	PCS[7, 8, 9]
]);
)

(
// NO YET
PCSMatrix.fromArray([
	[[1, PCS[2]], 3, []],
	[5, PCS[6, 7, 8], 9],
	[10, 11, [12, 13, 14]]
]);
)
::
returns:: A new link::Classes/PCSMatrix::.

METHOD:: fromChain
Creates a link::Classes/PCSMatrix:: from a link::Classes/PCSChain:: performing an "offset-by-one+rotation" (for want of a better name) for each row (see note below).
ARGUMENT:: pcsChain
A link::Classes/PCSChain::.
ARGUMENT:: normParts
Number of parts (items of the chain) that conforms the link::Classes/PCSMatrix#-hnorm::. Must be code::>= 1::.
NOTE::The norm, parts and code::pcsChain.size:: must be pre-calculated to make a consistent matrix.::
code::
c = PCSChain.new;
c.add(PCS[1]);
c.add(PCS[2]);
c.add(PCS[3]);
c.add(PCS[4]);
c.add(PCS[5]);
c.add(PCS[6]);

// try different number of parts by norm
// make a consistent example...
PCSMatrix.fromChain(c, 0); // error
PCSMatrix.fromChain(c, 1);
PCSMatrix.fromChain(c, 2);
PCSMatrix.fromChain(c, 3);
PCSMatrix.fromChain(c, 4);
PCSMatrix.fromChain(c, 5);
PCSMatrix.fromChain(c, 6);
PCSMatrix.fromChain(c, 7);
PCSMatrix.fromChain(c, 8);
::
returns:: A new link::Classes/PCSMatrix::.

METHOD:: roman
Creates a emphasis::roman square:: from code::norm::.
ARGUMENT:: norm
A link::Classes/PCS:: or an link::Classes/Array:: of link::Classes/Integer::s or link::Classes/PCS::s or link::Classes/Array:: (of link::Classes/Integer::s).
code::
PCSMatrix.roman([1, 2, 3]);
PCSMatrix.roman(PCS[1, 2, 3]);
PCSMatrix.roman([1, 2, [3, 4]]);
PCSMatrix.roman([PCS[1, 2], PCS[3]]);
PCSMatrix.roman([0, PCS[1, 2], PCS[3], [4, 5]]);
::
returns:: A new link::Classes/PCSMatrix::.

METHOD:: t1a
(describe method here)
ARGUMENT:: norm
(describe argument here)
returns:: A new link::Classes/PCSMatrix::.

METHOD:: t1b
(describe method here)
ARGUMENT:: norm
(describe argument here)
returns:: A new link::Classes/PCSMatrix::.

METHOD:: t2
(describe method here)
ARGUMENT:: hnorm
(describe argument here)
ARGUMENT:: vnorm
(describe argument here)
returns:: A new link::Classes/PCSMatrix::.

METHOD:: opcy
(describe method here)
ARGUMENT:: norm
(describe argument here)
ARGUMENT:: op
(describe argument here)
returns:: A new link::Classes/PCSMatrix::.



INSTANCEMETHODS::


METHOD:: matrix
Holds the link::Classes/PCSMatrix:: as an link::Classes/Array:: of link::Classes/Array::s of link::Classes/PCS::s.
note::Each sub-array is a row of the matrix from the top. The x and y axis are inverted when accessing it with the matrix[][] shortcut::
returns:: An link::Classes/Array::.

METHOD:: type
Returns the name of the creation procedure of the matrix.
returns:: A link::Classes/Symbol::.

METHOD:: row
Returns the row strong::n:: of the matrix.
ARGUMENT:: n
An link::Classes/Integer::.
returns:: An link::Classes/Array:: or code::nil::.

METHOD:: col
Returns the column strong::n:: of the matrix.
ARGUMENT:: n
An link::Classes/Integer::.
returns:: An link::Classes/Array:: or code::nil::.

METHOD:: rowSize
Returns the number of rows.
returns:: An link::Classes/Integer::.

METHOD:: colSize
Returns the number of columns.
returns:: An link::Classes/Integer::.

METHOD:: asciiPlot
ASCII plot of the matrix.
NOTE::A = 10, B = 11::
ARGUMENT:: stream
ARGUMENT:: lines
returns:: code::this::.

METHOD:: hnorm
Holds the horizontal norm of the matrix taken from the first row.
NOTE::This method is only useful if the matrix was created consistently.::
returns:: An link::Classes/Array:: of link::Classes/PCS::s.

METHOD:: vnorm
Returns the vertical norm of the matrix taken from the first column.
NOTE::This method is only useful if the matrix was created consistently.::
returns:: An link::Classes/Array:: of link::Classes/PCS::s.

METHOD:: pcsAtPos
Returns the link::Classes/PCS:: at row x, column y.
ARGUMENT:: x
An link::Classes/Integer::.
ARGUMENT:: y
An link::Classes/Integer::.
returns:: A link::Classes/PCS::.

METHOD:: pcsAtRow
Returns the resulting link::Classes/PCS:: at row n.
ARGUMENT:: n
An link::Classes/Integer::.
returns:: link::Classes/PCS::.

METHOD:: pcsAtCol
Returns the resulting link::Classes/PCS:: at column n.
ARGUMENT:: n
An link::Classes/Integer::.
returns:: link::Classes/PCS::

METHOD:: pcsAtAll
Return the resulting link::Classes/PCS:: of the whole matrix.
returns:: link::Classes/PCS::

METHOD:: addAt
Inserts a PC or link::Classes/PCS:: in the given position (strong::r::, strong::c::).
ARGUMENT:: r
An link::Classes/Integer:: indicating the row.
ARGUMENT:: c
An link::Classes/Integer:: indicating the column.
ARGUMENT:: pcs
An link::Classes/Integer:: or link::Classes/PCS:: to add.
returns:: code::this::.

METHOD:: removeAt
Removes a PC or link::Classes/PCS:: in the given position (strong::r::, strong::c::).
ARGUMENT:: r
An link::Classes/Integer:: indicating the row.
ARGUMENT:: c
An link::Classes/Integer:: indicating the column.
ARGUMENT:: pcs
An link::Classes/Integer:: or link::Classes/PCS:: to remove.
returns:: code::this::.

METHOD:: spar
Sparseness factor of the matrix.
returns:: A link::Classes/Float::.

METHOD:: hist
Histogram of the quantity of PCs contained in the matrix.
returns:: An link::Classes/Array:: of 12 link::Classes/Integer::s.

METHOD:: t
Performs link::Classes/PCS#-t:: on each element of the matrix.
ARGUMENT:: n
An Integer number of chromatic degrees, can be negative.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: m
Performs link::Classes/PCS#-m:: on each element of the matrix.
ARGUMENT:: n
Multiplication factor. An link::Classes/Integer::.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: i
Performs link::Classes/PCS#-i:: on each element of the matrix.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: invX
Specular inversion of the matrix over the x axis.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: invY
Specular inversion of the matrix over the y axis.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: eRow
Swaps rows strong::r1:: and strong::r2::.
ARGUMENT:: r1
An link::Classes/Integer::.
ARGUMENT:: r2
An link::Classes/Integer::.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: eCol
Swaps columns strong::c1:: and strong::c2::.
ARGUMENT:: c1
An link::Classes/Integer::.
ARGUMENT:: c2
An link::Classes/Integer::.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: rD
Rotate the matrix by the diagonal. The matrix must be squared. This method is equal but faster than code::this.r90.invY::.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: r90
Rotate the matrix 90 degrees.
ARGUMENT:: clockwise
Direction as a link::Classes/Boolean:: flag. code::true:: -> clockwise, code::false:: -> counter clockwise.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: performOnMatrix
Performs the method strong::op:: on each element of the matrix.
ARGUMENT:: op
A link::Classes/Symbol::.
ARGUMENT::  ... args
Arguments of the strong::op:: method.
returns:: A new link::Classes/PCSMatrix::.

METHOD:: swap
Swaps between columns the PC strong::pc:: in the coordinates strong::r1 c1:: and strong::r2 c2::. strong::pc:: can be and link::Classes/Integer:: or a link::Classes/PCS:: of cardinality one (if greater the first pc is taken). strong::pc:: must exist in both positions for this method to have any effect.
NOTE::This operation is made in place.::
returns:: code::this::.

METHOD:: swapping
Performs successive swaps to reduce the matrix density keeping its coherence (the resulting matrix has the same vertical and horizontal norms for each row/col).
NOTE::This operation is made in place.::
returns:: code::this::.

SUBSECTION:: Private Instance Methods

METHOD:: initMatrixFromArray
METHOD:: initChainMatrix
METHOD:: initTypeMatrix
METHOD:: initRomanMatrix
METHOD:: initOpcyMatrix
METHOD:: printOn
METHOD:: prSwapIfDensity



EXAMPLES::

code::
(some example code)
::
